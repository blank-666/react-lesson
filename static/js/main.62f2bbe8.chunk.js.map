{"version":3,"sources":["img/comment.svg","img/retweet.svg","img/like.svg","img/download.svg","img/verified.svg","components/post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Post","props","className","src","avatar","alt","name","verified","nickname","date","content","image","comment","comments","retweet","retweets","like","likes","download","postList","App","map","post","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,uNC2C5BC,EApCF,SAACC,GACV,OACI,yBAAKC,UAAU,WACX,6BAASA,UAAU,WACf,yBAAKA,UAAU,SAASC,IAAKF,EAAMG,OAAQC,IAAI,WAC/C,yBAAKH,UAAU,cACX,0BAAMA,UAAU,eAAeD,EAAMK,MACrC,yBAAKJ,UAAU,WAAWC,IAAKI,IAAUF,IAAI,aAC7C,0BAAMH,UAAU,aAAaD,EAAMO,SAAnC,IAA8CP,EAAMQ,OAExD,yBAAKP,UAAU,WACX,uBAAGA,UAAU,gBAAgBD,EAAMS,SACnC,yBAAKR,UAAU,gBAAgBC,IAAKF,EAAMU,MAAON,IAAI,WAEzD,yBAAKH,UAAU,UACX,yBAAKA,UAAU,qBACX,4BAAQA,UAAU,WAAU,yBAAKA,UAAU,gBAAgBC,IAAKS,IAASP,IAAI,aAC7E,0BAAMH,UAAU,gBAAgBD,EAAMY,WAE1C,yBAAKX,UAAU,qBACX,4BAAQA,UAAU,WAAU,yBAAKA,UAAU,gBAAgBC,IAAKW,IAAST,IAAI,aAC7E,0BAAMH,UAAU,gBAAgBD,EAAMc,WAE1C,yBAAKb,UAAU,kBACX,4BAAQA,UAAU,QAAO,yBAAKA,UAAU,aAAaC,IAAKa,IAAMX,IAAI,UACpE,0BAAMH,UAAU,aAAaD,EAAMgB,QAEvC,yBAAKf,UAAU,sBACX,4BAAQA,UAAU,YAAW,yBAAKA,UAAU,iBAAiBC,IAAKe,IAAUb,IAAI,mBCzBlGc,EAAW,CACf,CACEb,KAAM,mBACNF,OAViB,6FAWjBI,SAAU,oBACVE,QACE,kDACFC,MAbc,gGAcdF,KAAM,+BACNI,SAAU,IACVE,SAAU,IACVE,MAAO,KAET,CACEX,KAAM,cACNF,OApBe,qEAqBfI,SAAU,aACVE,QACE,4BACFC,MAvBoB,gEAwBpBF,KAAM,+BACNI,SAAU,KACVE,SAAU,IACVE,MAAO,MAET,CACEX,KAAM,gBACNF,OA9BkB,kKA+BlBI,SAAU,oBACVE,QACE,gCACFC,MAjC2B,uDAkC3BF,KAAM,+BACNI,SAAU,IACVE,SAAU,GACVE,MAAO,MAcIG,MAVf,WACE,OACE,6BACGD,EAASE,KAAI,SAACC,GAAD,OACZ,kBAAC,EAASA,QCzCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.62f2bbe8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/comment.ab5dbefc.svg\";","module.exports = __webpack_public_path__ + \"static/media/retweet.3facbb8d.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.4a8048e5.svg\";","module.exports = __webpack_public_path__ + \"static/media/download.918b128f.svg\";","module.exports = __webpack_public_path__ + \"static/media/verified.8973fefb.svg\";","import React from 'react';\r\nimport comment from '../img/comment.svg';\r\nimport retweet from '../img/retweet.svg';\r\nimport like from '../img/like.svg';\r\nimport download from '../img/download.svg';\r\nimport verified from '../img/verified.svg';\r\n\r\nconst Post = (props) =>{\r\n    return(\r\n        <div className='wrapper'>\r\n            <section className='section'>\r\n                <img className='avatar' src={props.avatar} alt='Avatar'></img>\r\n                <div className='post-title'>\r\n                    <span className='author-name'>{props.name}</span>\r\n                    <img className='verified' src={verified} alt='Verified'></img>\r\n                    <span className='post-data'>{props.nickname} {props.date}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <p className='content-text'>{props.content}</p>\r\n                    <img className='content-image' src={props.image} alt='Image'></img>\r\n                </div>\r\n                <div className='footer'>\r\n                    <div className='comment-container'>\r\n                        <button className='comment'><img className='comment-image' src={comment} alt='Comment'></img></button>\r\n                        <span className='comment-quan'>{props.comments}</span>\r\n                    </div>\r\n                    <div className='retweet-container'>\r\n                        <button className='retweet'><img className='retweet-image' src={retweet} alt='Retweet'></img></button>\r\n                        <span className='retweet-quan'>{props.retweets}</span>\r\n                    </div>\r\n                    <div className='like-container'>\r\n                        <button className='like'><img className='like-image' src={like} alt='Like'></img></button>\r\n                        <span className='like-quan'>{props.likes}</span>\r\n                    </div>\r\n                    <div className='download-container'>\r\n                        <button className='download'><img className='download-image' src={download} alt='Download'></img></button>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\nimport Post from './components/post';\n\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\nconst RICK_IMAGE = 'https://i.axs.com/2019/11/rick-astley_11-12-19_7_5dcac7b590083.jpg';\nconst RISK_POST_IMAGE = 'https://miro.medium.com/max/3404/1*zV1SLF4waxut9ojmf2VvoA.png';\nconst RICARDO_IMAGE = 'https://vignette.wikia.nocookie.net/meme/images/d/de/Ricardo_Milos_dances_to_DotA_by_Basshunter/revision/latest/top-crop/width/220/height/220?cb=20190616154801';\nconst RICARDO_VS_JOHNY_IMAGE = 'https://i.ytimg.com/vi/gMYg-bgQWFk/maxresdefault.jpg';\n\nconst postList = [\n  {\n    name: \"Anakin Skywalker\",\n    avatar: ANAKIN_IMAGE,\n    nickname: \"@who's_your_daddy\",\n    content:\n      \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\n    image: RAY_IMAGE,\n    date: \"26 февр.\",\n    comments: 482,\n    retweets: 146,\n    likes: 768,\n  },\n  {\n    name: \"Rick Astley\",\n    avatar: RICK_IMAGE,\n    nickname: \"@disco_boy\",\n    content:\n      \"Make America disco again!\",\n    image: RISK_POST_IMAGE,\n    date: \"26 февр.\",\n    comments: 1498,\n    retweets: 666,\n    likes: 5767,\n  },\n  {\n    name: \"Ricardo Milos\",\n    avatar: RICARDO_IMAGE,\n    nickname: \"@ricardo_official\",\n    content:\n      \"So... Who will win, ladies?))\",\n    image: RICARDO_VS_JOHNY_IMAGE,\n    date: \"26 февр.\",\n    comments: 324,\n    retweets: 55,\n    likes: 987,\n  }\n]\n\nfunction App() {\n  return (\n    <div>\n      {postList.map((post) => (\n        <Post {...post} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}